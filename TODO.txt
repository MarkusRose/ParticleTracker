What needs to be done
=====================

- D2 has too large values. Simulate...
- Convergence of HMM
- Feducial Drift. Markers move towards one another???


Binary file AnalysisTools/ana_singlestate.pyc matches
AnalysisTools/hmmlikelihood.py:    print len(outtracks)
AnalysisTools/hmmlikelihood.py:#  print rsquared
AnalysisTools/hmmlikelihood.py:    #  print rsquared
AnalysisTools/hmmlikelihood.py:    #print len(allTracks)
AnalysisTools/hmmlikelihood.py:            print l
AnalysisTools/hmmlikelihood.py:    #print len(allTracks)
AnalysisTools/hmmlikelihood.py:            #print dtheta
AnalysisTools/hmmlikelihood.py:        #print j
AnalysisTools/hmmlikelihood.py:        #print i
AnalysisTools/hmmlikelihood.py:        #print L[-1], 10**theta[-1][0], 10**theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/hmmlikelihood.py:            #print "TRUE", vartheta
AnalysisTools/hmmlikelihood.py:    print "              RESULTS:"
AnalysisTools/hmmlikelihood.py:    print "          ", Lmax, 10**theta[-1][0], 10**theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/hmmlikelihood.py:    print numparts
AnalysisTools/hmmlikelihood.py:            print "    Run {:},{:}".format(counter,k+1)
AnalysisTools/hmmlikelihood.py:        print thetaMean
AnalysisTools/driftCorrection.py:            print("Error: !!!Tracks don't have same length!!!")
AnalysisTools/driftCorrection.py:        print("Error: !!!Tracks don't have same length!!!")
AnalysisTools/driftCorrection.py:    print("Correcting for Drift now")
AnalysisTools/driftCorrection.py:    print("Done!")
AnalysisTools/driftCorrection.py:    print("Correcting for Drift now")
AnalysisTools/testAlgos.py:    #print l
AnalysisTools/testAlgos.py:        #print anew[0].dtype
AnalysisTools/testAlgos.py:    #print D
AnalysisTools/testAlgos.py:    #print theta
AnalysisTools/testAlgos.py:    #        print 0, dr2[k], l[k][0]
AnalysisTools/testAlgos.py:    #        print 1, dr2[k], l[k][1]
AnalysisTools/testAlgos.py:    #print anolog[-1]
AnalysisTools/testAlgos.py:    #print l
AnalysisTools/testAlgos.py:        print("pi is "+str(pi[0])+ ' ' + str(pi[1]))
AnalysisTools/testAlgos.py:    print anew,alogs[0]
AnalysisTools/testAlgos.py:        #print j
AnalysisTools/testAlgos.py:        #print anew
AnalysisTools/testAlgos.py:        #print alogs
AnalysisTools/testAlgos.py:    print alogs[0], len(alogs)
AnalysisTools/testAlgos.py:    print testLikely([3,2,0.1,0.1])
AnalysisTools/testAlgos.py:    print testLogLikely([3,2,0.1,0.1])
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print "Original Image"
AnalysisTools/filtertests.py:    #print data.max(), data.min(), data.mean(), data.std()
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print "Median Image"
AnalysisTools/filtertests.py:    #print median.max(), median.min(), median.mean(), median.std()
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print background_mean, background_std
AnalysisTools/filtertests.py:        #print "Cutoff is {}: ".format(cutoff)
AnalysisTools/filtertests.py:        #print "setting cutoff to {}".format(cutoff)
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print "Boxcar Image"
AnalysisTools/filtertests.py:    #print boxcar.max(),boxcar.min(),boxcar.mean(),boxcar.std()
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print "Gaussian Image"
AnalysisTools/filtertests.py:    #print gaussian.max(), gaussian.min(), gaussian.mean(), gaussian.std()
AnalysisTools/filtertests.py:    #print 
AnalysisTools/filtertests.py:    ##print background_mean, background_std
AnalysisTools/filtertests.py:    #print                       # 
AnalysisTools/filtertests.py:    #print "Binary Image"
AnalysisTools/filtertests.py:    #print binary.max(), binary.min(), binary.mean(), binary.std()
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:    #print "Cutoff generated"
AnalysisTools/filtertests.py:    #print cutoff, background_mean, signal_power, background_std
AnalysisTools/filtertests.py:    #print
AnalysisTools/filtertests.py:            print "{0:1d}{1:1d}".format(intcount,intback)
AnalysisTools/filtertests.py:                print "    {0:02d}".format(int(signoise))
AnalysisTools/filtertests.py:                #print (intcount*1000+intback*100+int(signoise))
AnalysisTools/filtertests.py:                #print "{0:02d}".format(int(signoise))
AnalysisTools/filtertests.py:                #print "{0:1d}{1:1d}{2:02d}".format(intcount,intback,int(signoise))
AnalysisTools/mcmc.py:print dr2
AnalysisTools/mcmc.py:print
AnalysisTools/mcmc.py:        print("pi is "+str(pi[0])+ ' ' + str(pi[1]))
AnalysisTools/mcmc.py:        #print j
AnalysisTools/mcmc.py:        #print anew[0].dtype
AnalysisTools/mcmc.py:    #print D
AnalysisTools/mcmc.py:    #print theta
AnalysisTools/mcmc.py:    #        print 0, dr2[k], l[k][0]
AnalysisTools/mcmc.py:    #        print 1, dr2[k], l[k][1]
AnalysisTools/mcmc.py:    #print anolog[-1]
AnalysisTools/mcmc.py:            print l
AnalysisTools/mcmc.py:            #print L[-1], theta[-1][0], theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/mcmc.py:    #print Lmax, theta[-1][0], theta[-1][1]
AnalysisTools/mcmc.py:        print i
AnalysisTools/mcmc.py:        #print L[-1], theta[-1][0], theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/mcmc.py:    #print Lmax, theta[-1][0], theta[-1][1]
AnalysisTools/mcmc.py:    print
AnalysisTools/mcmc.py:    print "#"+str( logLikelyhood([-2,-1,0.1,0.05]))
AnalysisTools/mcmc.py:    print "#"+str( likelihood([3,2,0.1,0.05]) )
AnalysisTools/ana_singlestate.py:    printMultiArrayToFile(tracks,outfile,head=head)
AnalysisTools/ana_singlestate.py:def printArrayToFile(arr,fopen,head=None):
AnalysisTools/ana_singlestate.py:def printMultiArrayToFile(arr,fopen,sepword="Track",head=None):
AnalysisTools/ana_singlestate.py:        printArrayToFile(mem,fopen,head=head)
AnalysisTools/ana_singlestate.py:    print xran
AnalysisTools/ana_singlestate.py:    #print len(msd)
AnalysisTools/ana_singlestate.py:        #print "Track {}".format(counter)
AnalysisTools/ana_singlestate.py:    print "Analyzing the End-To-End distribution of " + str(len(tracks)) + " tracks."
AnalysisTools/ana_singlestate.py:    printArrayToFile(outarray,fo,head=["displacement(pixel)","relativeCounts"])
AnalysisTools/ana_singlestate.py:    print "End-To-End Displacement has been saved to folder."
AnalysisTools/ana_singlestate.py:    print "Starting Analysis of " + str(len(tracks)) + " single tracks."
AnalysisTools/ana_singlestate.py:    print "....This will take a while..."
AnalysisTools/ana_singlestate.py:    print "........(creating a list of MSD from all tracks; this takes long...)"
AnalysisTools/ana_singlestate.py:    print "........(finding diffusion coefficient from all MSDs from list)"
AnalysisTools/ana_singlestate.py:    print ">>>> The average diffusion coefficient is: " + str(Dlist.mean()*Dfactor) + " +- " + str(Dlist.std()*Dfactor) + " um^2/s"
AnalysisTools/ana_singlestate.py:    print "........(finding the lengths of the single tracks)"
AnalysisTools/ana_singlestate.py:    print ">>>> The average track length is: " + str(lenList.mean()*frametime) + " +- " + str(lenList.std()*frametime) + " s"
AnalysisTools/ana_singlestate.py:    print "Showing: Diffusion coefficient distribution of " + str(len(tracks)) + " tracks."
AnalysisTools/ana_singlestate.py:    printArrayToFile(outarray,fo,head=["diffConst(pixel**2/frame)","relativeCounts"])
AnalysisTools/ana_singlestate.py:    print "Showing: Length of tracks distribution for " + str(len(tracks)) + " tracks."
AnalysisTools/ana_singlestate.py:    printArrayToFile(outarray,fo,head=["track-length(frame)","relativeCounts"])
AnalysisTools/ana_singlestate.py:    print "Showing: Dependence of the diffusion coefficient on the track length of " + str(len(tracks)) + " individual tracks."
AnalysisTools/ana_singlestate.py:                print "Oh no, yes"
AnalysisTools/ana_singlestate.py:    printArrayToFile(outarray,fo,head=["track-length(frame)","meanDiffConst"])
AnalysisTools/ana_singlestate.py:    printArrayToFile(combtr,outfile,head)
AnalysisTools/ana_singlestate.py:    print "Combining " + str(len(tracks)) + " tracks."
AnalysisTools/ana_singlestate.py:    print "Creating MSD for combined track."
AnalysisTools/ana_singlestate.py:    print ">>>> Found diffusion coefficient: " + str(ct_diffconst[1]*Dfactor) + " um^2/s"
AnalysisTools/ana_singlestate.py:    printArrayToFile(ct_msd,of,head=["Stpngize","MSD"])
AnalysisTools/ana_singlestate.py:    print "Starting Distribution Analysis"
AnalysisTools/ana_singlestate.py:    print "....Saving Displacements to file."
AnalysisTools/ana_singlestate.py:    printArrayToFile(dipllist,outfile,["Steppingtime","dx","dy"])
AnalysisTools/ana_singlestate.py:    print "....Creating r^2-distribution"
AnalysisTools/ana_singlestate.py:    print "....Creating distribution of stpngizes in x and y"
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print "Cleaning Track File from NAN"
AnalysisTools/ana_singlestate.py:        print "----------------------------"
AnalysisTools/ana_singlestate.py:        print "Tracks are too short! Please adjust 'minTrackLen' to a lower value!"
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print "Starting End-To-End Displacement Analysis for single tracks"
AnalysisTools/ana_singlestate.py:        print "-----------------------------------------------------------"
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print "Starting Diffusion Constant Analysis for single tracks"
AnalysisTools/ana_singlestate.py:        print "------------------------------------------------------"
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print
AnalysisTools/ana_singlestate.py:        print "Starting Combined Track Analysis"
AnalysisTools/ana_singlestate.py:        print "--------------------------------"
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    print len(outtracks)
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:#  print rsquared
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    #  print rsquared
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    #print len(allTracks)
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:            print l
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    #print len(allTracks)
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:            #print dtheta
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:        #print j
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:        #print i
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:        #print L[-1], 10**theta[-1][0], 10**theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:            #print "TRUE", vartheta
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    print "              RESULTS:"
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    print "          ", Lmax, 10**theta[-1][0], 10**theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:    print numparts
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:            print "    Run {:},{:}".format(counter,k+1)
AnalysisTools/HMM-MCMC-versions/hmmlikelihood.py:        print thetaMean
AnalysisTools/hiddenMarkov.py:#  print rsquared
AnalysisTools/hiddenMarkov.py:    #  print rsquared
AnalysisTools/hiddenMarkov.py:            #print l
AnalysisTools/hiddenMarkov.py:        print thetaMean
AnalysisTools/hiddenMarkov.py:    print path
AnalysisTools/hiddenMarkov.py:    print("Running HMM")
AnalysisTools/likelyhoodwrapper.py:        print("pi is "+str(pi[0])+ ' ' + str(pi[1]))
AnalysisTools/likelyhoodwrapper.py:        #print j
AnalysisTools/likelyhoodwrapper.py:        #print anew[0].dtype
AnalysisTools/likelyhoodwrapper.py:            print l
AnalysisTools/likelyhoodwrapper.py:            #print L[-1], theta[-1][0], theta[-1][1], theta[-1][2], theta[-1][3]
AnalysisTools/likelyhoodwrapper.py:    #print Lmax, theta[-1][0], theta[-1][1]
AnalysisTools/speedCorrelationIndex.py:    print N
AnalysisTools/speedCorrelationIndex.py:    #print v    
AnalysisTools/speedCorrelationIndex.py:    print("Starting")
AnalysisTools/speedCorrelationIndex.py:        print Uk
AnalysisTools/speedCorrelationIndex.py:        print k
AnalysisTools/speedCorrelationIndex.py:    print CofK
AnalysisTools/speedCorrelationIndex.py:    print C
analysistools.py:    printMultiArrayToFile(tracks,outfile,head=head)
analysistools.py:def printArrayToFile(arr,fopen,head=None):
analysistools.py:def printMultiArrayToFile(arr,fopen,sepword="Track",head=None):
analysistools.py:        printArrayToFile(mem,fopen,head=head)
analysistools.py:    print xran
analysistools.py:    #print len(msd)
analysistools.py:        #print "Track {}".format(counter)
analysistools.py:    print "Analyzing the End-To-End distribution of " + str(len(tracks)) + " tracks."
analysistools.py:    printArrayToFile(outarray,fo,head=["displacement(pixel)","relativeCounts"])
analysistools.py:    print "End-To-End Displacement has been saved to folder."
analysistools.py:    print "Starting Analysis of " + str(len(tracks)) + " single tracks."
analysistools.py:    print "....This will take a while..."
analysistools.py:    print "........(creating a list of MSD from all tracks; this takes long...)"
analysistools.py:    print "........(finding diffusion coefficient from all MSDs from list)"
analysistools.py:        print "Problem in lengths"
analysistools.py:        print len(Dlist) len(trid)
analysistools.py:    print ">>>> The average diffusion coefficient is: " + str(Dlist.mean()*Dfactor) + " +- " + str(Dlist.std()*Dfactor) + " um^2/s"
analysistools.py:    print "........(finding the lengths of the single tracks)"
analysistools.py:    print ">>>> The average track length is: " + str(lenList.mean()*frametime) + " +- " + str(lenList.std()*frametime) + " s"
analysistools.py:    print "Showing: Diffusion coefficient distribution of " + str(len(tracks)) + " tracks."
analysistools.py:    printArrayToFile(outarray,fo,head=["diffConst(pixel**2/frame)","relativeCounts"])
analysistools.py:    print "Showing: Length of tracks distribution for " + str(len(tracks)) + " tracks."
analysistools.py:    printArrayToFile(outarray,fo,head=["track-length(frame)","relativeCounts"])
analysistools.py:    print "Showing: Dependence of the diffusion coefficient on the track length of " + str(len(tracks)) + " individual tracks."
analysistools.py:                print "Oh no, yes"
analysistools.py:    printArrayToFile(outarray,fo,head=["track-length(frame)","meanDiffConst"])
analysistools.py:    printArrayToFile(combtr,outfile,head)
analysistools.py:    print "Combining " + str(len(tracks)) + " tracks."
analysistools.py:    print "Creating MSD for combined track."
analysistools.py:    print ">>>> Found diffusion coefficient: " + str(ct_diffconst[1]*Dfactor) + " um^2/s"
analysistools.py:    printArrayToFile(ct_msd,of,head=["Stpngize","MSD"])
analysistools.py:    print "Starting Distribution Analysis"
analysistools.py:    print "....Saving Displacements to file."
analysistools.py:    printArrayToFile(dipllist,outfile,["Steppingtime","dx","dy"])
analysistools.py:    print "....Creating r^2-distribution"
analysistools.py:    print "....Creating distribution of stpngizes in x and y"
analysistools.py:        print
analysistools.py:        print "Cleaning Track File from NAN"
analysistools.py:        print "----------------------------"
analysistools.py:        print "Tracks are too short! Please adjust 'minTrackLen' to a lower value!"
analysistools.py:        print
analysistools.py:        print
analysistools.py:        print "Starting End-To-End Displacement Analysis for single tracks"
analysistools.py:        print "-----------------------------------------------------------"
analysistools.py:        print
analysistools.py:        print
analysistools.py:        print "Starting Diffusion Constant Analysis for single tracks"
analysistools.py:        print "------------------------------------------------------"
analysistools.py:        print
analysistools.py:        print
analysistools.py:        print "Starting Combined Track Analysis"
analysistools.py:        print "--------------------------------"
analysistools.py:    print tlt, map(len,[tracks[x] for x in tlt])
analysistools.py:    #print tmtl, map(len,[tracks[x] for x in tmtl])
analysistools.py:    print minEE
analysistools.py:    print "Mean of all tracks: " + str(alldiffs.mean()) + " +- " + str(alldiffs.std())
analysistools.py:    print alldiffs.mean()
analysistools.py:    print diffconstant
analysistools.py:    printMultiArrayToFile(allmsds,fo,sepword="MSD",head=head)
benchTrack.py:        print "Starting " + self.name
benchTrack.py:        print "Exiting " + self.name
benchTrack.py:            print "%s processing %s" % (threadName,data)
benchTrack.py:                print 'Link found'
benchTrack.py:    print falselinks
benchTrack.py:                    print
benchTrack.py:                    print("starting {:}, {:}, {:}, {:}".format(d,n,sr,i))
Detection/oldFunctions.py:    print "Start with initial position given"
Detection/oldFunctions.py:            print("Missed frame {:}".format(part[0]))
Detection/oldFunctions.py:            print("Fit does not fit!")
Detection/oldFunctions.py:    print "end with initial pos"
Detection/oldFunctions.py:def printPictures(tracks,numtrack):
Detection/oldFunctions.py:        print("# {:} =====================".format(i))
Detection/oldFunctions.py:        print ""
Detection/oldFunctions.py:    print("Done creating tracks")
Detection/oldFunctions.py:    print('ChooChoo! Track 29: \n' + str(tracks[29].track))
Detection/oldFunctions.py:    print("Boy, you can give me a schein")
Detection/oldFunctions.py:        print(name + ": " + str(tracks[29].track[name]))
Detection/oldFunctions.py:    print(tracks[0][0])
Detection/oldFunctions.py:    print(tracks[0][1],tracks[0][2])
Detection/oldFunctions.py:    print(image[tracks[0][1],tracks[0][2]])
Detection/oldFunctions.py:    print("\nDone!\n---------\n")
Detection/detectParticles.py:        #print "oh here we are"
Detection/detectParticles.py:    print('_' * 52)
Detection/detectParticles.py:        #print("\n==== Doing image no " + str(frame) + " ====")
Detection/detectParticles.py:#    print pd
Detection/detectParticles.py:    #print np.transpose(local_max_pixels)
Detection/detectParticles.py:    #print(row0,' ',col0)
Detection/detectParticles.py:        #print("Oh, too close to frame boarder to fit a gaussian.")
Detection/detectParticles.py:    #print np.transpose(local_max_pixels)
Detection/detectParticles.py:    #print(row0,' ',col0)
Detection/detectParticles.py:        #print("Oh, too close to frame boarder to fit a gaussian.")
Detection/detectParticles.py:        #print("So where is the point?")
Detection/detectParticles.py:        #print("Fit did not converge")
Detection/detectParticles.py:        #print("Fit too eccentric "+ str(np.abs(fitdata[5]/fitdata[4])) + ' ' + str(np.abs(fitdata[4]/fitdata[5])))
Detection/detectParticles.py:        print("Fit too unlike theoretical psf")
Detection/detectParticles.py:            print("spot x too large")
Detection/detectParticles.py:            print("spot x too small")
Detection/detectParticles.py:            print("spot y too large")
Detection/detectParticles.py:            print("spot y too small")
Detection/detectParticles.py:        #print("Fit too unlike theoretical psf "+ str(fitdata[4]**2+fitdata[5]**2) + ' ' + str(sigma))
Detection/detectParticles.py:    #print background_mean, background_std
Detection/detectParticles.py:        #print "Cutoff is {}: ".format(cutoff)
Detection/detectParticles.py:        #print "setting cutoff to {}".format(cutoff)
Detection/detectParticles.py:        #print "doing centroid"
Detection/detectParticles.py:#    print("Cutoff is at: {:}".format(cutoff))
Detection/detectParticles.py:    #print background_mean, background_std
Detection/detectParticles.py:    #print cutoff
Detection/detectParticles.py:    #print("Cutoff is at: {:}".format(cutoff))
Detection/detectParticles.py:    #print("Max of MaxFilter is at: {:}".format(img_max_filter.max()))
Detection/detectParticles.py:    #print 'doing centroid'
Detection/detectParticles.py:    #            print gausFiltImage[i,j]
Detection/detectParticles.py:    print cccc
Detection/detectParticles.py:                #print i,j
Detection/detectParticles.py:    #print "done clustering"
Detection/detectParticles.py:    #print countnet1
Detection/detectParticles.py:    print cccc
Detection/detectParticles.py:    print("\nNumber of clusters detected: " + str(len(clusters)))
Detection/detectParticles.py:    print("Cluster size: " + str(np.array(sizecheck).mean()) + " +- " + str(np.array(sizecheck).std()) + "\n")
Detection/detectParticles.py:    #print("\nNumber of clusters after restrict: " + str(len(clusters)))
Detection/detectParticles.py:    #print("Cluster size: " + str(np.array(sizecheck).mean()) + " +- " + str(np.array(sizecheck).std()) + "\n")
Detection/detectParticles.py:    #print "done getting local maxs"
Detection/detectParticles.py:    #print local_max_pixels
Detection/detectParticles.py:    #print "local max pixels " + str(len(local_max_pixels[0]))
Detection/detectParticles.py:    #print "length is: ", len(local_max_pixels[0])
Detection/detectParticles.py:        #print i
Detection/detectParticles.py:        #print "setting ROI"
Detection/detectParticles.py:            #print "ohoh"
Detection/detectParticles.py:        #print "starting Fit"
Detection/detectParticles.py:        #print fitdata
Detection/detectParticles.py:        #print "checking fit"
Detection/detectParticles.py:            #print "Fit not correct! "+str(nunocon) + " " + str(nunoexc) + " " + str(nusigma)
Detection/detectParticles.py:        #print "add a particle to the list"
Detection/detectParticles.py:        #print "get local maxima"
Detection/detectParticles.py:    #print "               1"
Detection/detectParticles.py:        print
Detection/detectParticles.py:        print("Not converged:  {:5d}".format(nunocon))
Detection/detectParticles.py:        print("Too excentric:  {:5d}".format(nunoexc))
Detection/detectParticles.py:        print("Wrong Sigma:    {:5d}".format(nusigma))
Detection/detectParticles.py:        print("Close to Edge:  {:5d}".format(int(nuedge)))
Detection/detectParticles.py:        print("Appended Parts: {:5d}".format(nupart))
Detection/detectParticles.py:        print("                +++++") 
Detection/detectParticles.py:        print("Sum:            {:5d}".format(sumparts))
Detection/readImage.py:#        print("Bit_depth unknown, set to 16bit")
Detection/readImage.py:#    print inImage.size
Detection/readImage.py:#    print a.shape
Detection/readImage.py:#    print a.shape
Detection/readImage.py:    print(image.min())
Detection/readImage.py:    print
Detection/readImage.py:                #print(image.min())
Detection/readImage.py:                #print(image.min())
Detection/readImage.py:    print
Detection/readImage.py:    print(image.min())
Detection/readImage.py:    #print inArray.dtype
Detection/readImage.py:    print background_mean, background_std
Detection/readImage.py:    print(listOfParticles)
Detection/det_and_track.py:        print len(self.tracks)
Detection/det_and_track.py:        print "Got to here"
Detection/det_and_track.py:        print len(self.tracks)
Detection/det_and_track.py:                print "Didn't Work, please restart!"
Detection/det_and_track.py:#        print "Setup couldn't be copied. It is the same File!"
Detection/det_and_track.py:        print "No path named " + path
Detection/det_and_track.py:    print "Number of images found: " + str(len(img))
Detection/det_and_track.py:            #print particle.frame, addUp, frame_count
Detection/det_and_track.py:                print ("nope, particle aint in right frame.")
Detection/det_and_track.py:    print("\nEditing first image")
Detection/det_and_track.py:    print("\n==== Series of all location pictures read from file ====")
Detection/det_and_track.py:    print("Mark tracks in images")
Detection/det_and_track.py:    print('_'*52)
Detection/det_and_track.py:                #print j.track[i]['frame'], i
Detection/det_and_track.py:    print('_'*52)
Detection/det_and_track.py:        #print "doing track {:}".format(t)
Detection/det_and_track.py:    print("\n    ==================================\n"
Detection/det_and_track.py:    print("Switching path and copying setup file.")
Detection/det_and_track.py:    print("\nPlease select a folder: \n")
Detection/det_and_track.py:    print("{:} images selected for analysis.".format(len(img)))
Detection/det_and_track.py:        print("Done! See first image at " + pathway + ".")
Detection/det_and_track.py:    print('\n==== Start Localization and Detection ====')
Detection/det_and_track.py:        print("Read particle data from file")
Detection/det_and_track.py:    print("Done Localization and Detection\n")
Detection/det_and_track.py:    print('\n==== Start Tracking ====')
Detection/det_and_track.py:    print("Done! Got all the data from images.\n"+ "-" * 52)
Detection/det_and_track.py:    print("\n==== Start Analysis ====")
Detection/det_and_track.py:    print("Create images of single tracks")
Detection/det_and_track.py:    print("\nAppending trajectories to mega-trajectory")
Detection/det_and_track.py:    print("\nCalculating MSD for comined Tracks")
Binary file Detection/readImage.pyc matches
Detection/analysisTools.py:    #print liste
Detection/analysisTools.py:    #print len(outtrack)
Detection/analysisTools.py:    #print outtrack[-1][0]
Detection/analysisTools.py:            #print "mennooo", k, trn
Detection/analysisTools.py:    #print len(track)
Detection/analysisTools.py:    #print deltamax
Detection/analysisTools.py:                #print("No data point found for delta = {:}".format(delta))
Detection/analysisTools.py:            #print(str(delta)+' '+str(numofdata))
Detection/analysisTools.py:    #print(msd)
Detection/analysisTools.py:        print "Velocities don't match track."
Detection/analysisTools.py:    print len(tracks)
Detection/markPosition.py:    #print(image.shape)
Detection/markPosition.py:                #print((pos_x,pos_y),(i,j))
Detection/markPosition.py:                print "Error converting RGB, no color given"
Detection/markPosition.py:    #print image.max(), image.min()
Detection/markPosition.py:    #print imshape
Detection/markPosition.py:        #print(str((posList[i]['x'], posList[i]['y'])) + " -> " + str((posList[i+1]['x'],posList[i+1]['y'])))
Detection/markPosition.py:#                print x, (two_x-one_x)
Detection/markPosition.py:#            print("yes, this happend")
Detection/markPosition.py:#            print image
Detection/testTrack.py:    print len(trajectories)
Detection/testTrack.py:        print "doing track {:}".format(t)
Detection/ctrack.py:            #print particle['x']
Detection/ctrack.py:    print("Done writing Tracks")
Detection/ctrack.py:    print("Number of Tracks found: {:}".format(len(tracks)))
Detection/ctrack.py:        #print line
Detection/ctrack.py:    #print("Number of frames: " + str(num_frames))
Detection/ctrack.py:        print("Change link_range")
Detection/ctrack.py:    #print particle_data[0][16].next.shape
Detection/ctrack.py:    print('_'*52)
Detection/ctrack.py:        #print frame
Detection/ctrack.py:        #print ("Image %s Processing" % (frame+1))
Detection/ctrack.py:            #print num_particles_next
Detection/ctrack.py:            #print('building cost matrix')
Detection/ctrack.py:            #print('build association matrix')
Detection/ctrack.py:            #print('done with matrices')
Detection/ctrack.py:                    #print((i,j))
Detection/ctrack.py:                    #print(cur_particle.next)
Detection/ctrack.py:                        #print((i,j))
Detection/ctrack.py:                        #print(cur_particle.next.shape)
Detection/ctrack.py:                        #print("frame: " + str(frame) + ", link: " + str(link) + ", current particle: " + str(i))
Detection/ctrack.py:                        #print(len(cur_particle.next.shape))
Detection/ctrack.py:                        #print(cur_particle.next.shape)
Detection/ctrack.py:                        #    print("Problem: j out of bounds ( j > len(cur_particle.next[0]))")
Detection/ctrack.py:        #print("Done with linking Particles for image " + str(frame+1))
Detection/ctrack.py:        print(m)
Detection/ctrack.py:                #print( i+n+1, link_index )
Detection/ctrack.py:                #print( len(particle_data),len(particle_data[i+n+1]) )
Detection/ctrack.py:                                print "IndexError for this line"
Detection/ctrack.py:                                print "linked_particle {:}, index {:}".format(len(particle_data),k+n+1)
Detection/ctrack.py:                                print "linked_particle-sublength {:}, index {:}".format(len(particle_data[k+n+1]),link_index)
Detection/ctrack.py:                        #print("attach nextparticle to track " + str(len(trajectories)))
Detection/ctrack.py:                        #print("frame: " + str(k))
Detection/ctrack.py:                        #print("Linked Particle frame: " + str(linked_particle.frame))
Detection/ctrack.py:                        #print("Particle Track " + str(len(trajectories)) + ": " + str(particle_track.track['x']))
Detection/ctrack.py:                        print("Stopping track here: " + str(len(particle_track)))
Detection/ctrack.py:    print("Done Linking")
Detection/convertFiles.py:    #print track
Detection/convertFiles.py:    #print frame
Detection/convertFiles.py:    #print pos
Detection/convertFiles.py:    #print sorted(pos)
Detection/convertFiles.py:                    print "Number of particles and Frame content don't match!"
Detection/convertFiles.py:            print "Number of particles and Frame content don't match!"
Detection/convertFiles.py:#    print("Empty lines: {:}".format(emptycounter))
Detection/convertFiles.py:#    print("Hashtag lines: {:}".format(hashcounter))
Detection/convertFiles.py:            print "We have a problem"
Detection/convertFiles.py:    #print pos
Detection/convertFiles.py:    #print posnew
Detection/convertFiles.py:    print("Hello There")
Detection/convertFiles.py:            print "else"
Detection/convertFiles.py:                print frame
Detection/convertFiles.py:    print loc
Detection/filters.py:            #    print("Pixel brighter than cutoff: " + str((i,j)))
Detection/filters.py:    print("done")
detection.py:    print "Doing {:} to {:} now!".format(imagedir,pathway)
detection.py:        print("{:}. Testing for {:}.".format(count,sig))
detection.py:        print("    Found {:} particles.".format(numparts))
detection.py:    print("Which image is the best?")
detection.py:        print("Index not valid. Quitting system now!")
GUI/guiDetection.py:                        print("True")
GUI/guiDetection.py:            print "Done"
GUI/guiDetection.py:            print "Wrong inputs"
Binary file GUI/__pycache__/guiAnalysis.cpython-36.pyc matches
GUI/tester.py:    print "Hello World"
GUI/guiSimulation.py:        print(">>>>Starting Simulation")
GUI/guiSimulation.py:            print "Everythings fine, running program now. Have to pass variables to Fileio.setSysProps with all the parameters given."
GUI/guiSimulation.py:                    print "starting simulation"
GUI/guiSimulation.py:                    print ">>>>Finished Simulation"
GUI/guiSimulation.py:            print "Done"
GUI/guiDetandTrack.py:            print "Done"
GUI/guiDetandTrack.py:            print "Wrong inputs"
GUI/guiAnalysis.py:                print("Invalid Filename")
GUI/guiAnalysis.py:                print(self.v_trackFile.get())
GUI/guiAnalysis.py:                print("Invalid Pixelsize")
GUI/guiAnalysis.py:                print("Invalid Frametime")
GUI/guiAnalysis.py:                print("Invalid number of Monte Carlo runs")
GUI/guiAnalysis.py:            #    print("Invalid search radius for MCMC")
GUI/guiAnalysis.py:            print("ValueError")
GUI/guiAnalysis.py:            print("TypeError")
GUI/guiAnalysis.py:                print("combined and individual")
GUI/guiAnalysis.py:                print("individual tracks")
GUI/guiAnalysis.py:                print("Combined Track")
GUI/guiAnalysis.py:                print("Monte Carlo")
GUI/guiAnalysis.py:                print("Speed Correlation Index")
GUI/guiTracking.py:            #print "Works now"
GUI/guiTracking.py:            print "Done"
GUI/guiTracking.py:            print "Wrong inputs"
plotting_hmm.py:    print("Maximum = {:} and Minimum = {:}".format(displ.max(),displ.min()))
plotting_hmm.py:    print("Plotting now")
plotting_hmm.py:            print "We have a problem here: long track length short"
plotting_hmm.py:        print("Create plots of Tracks? [y,N]  ")
plotting_hmm.py:                    print("Problem! {:}".format(hmmdata.id[indeces[i][0][j]]))
plotting_hmm.py:                    print("Track of length 0???")
plotting_hmm.py:                print("Done {:}-{:}".format(i,j))
plotting_hmm.py:                print("Track of length 0???")
plotting_hmm.py:            print("Done {:}-{:}".format(0,counter))
plotting_hmm.py:            print("Track of length 0???")
plotting_hmm.py:        print("Done {:}-{:}".format(0,counter))
plotting_pure.py:    print("Maximum = {:} and Minimum = {:}".format(displ.max(),displ.min()))
plotting_pure.py:    print("Plotting now")
plotting_pure.py:        print("Create plots of Tracks? [y,N]  ")
plotting_pure.py:                print("Track of length 0???")
plotting_pure.py:            print("Done {:}-{:}".format(0,counter))
plotting_pure.py:            print("Track of length 0???")
plotting_pure.py:        print("Done {:}-{:}".format(0,counter))
Simulation/simSetup.py:                    print "Not a valid state please select an integer between 1 and 3"
Simulation/simSetup.py:            print "Not an integer, please try again."
Simulation/simSetup.py:            print "Number of D not allowed."
Simulation/simSetup.py:                print("Not a float, please try again.")
Simulation/enzymeDiffuser.py:    print(stringin)
Simulation/enzymeDiffuser.py:    print(">>>Simulation starting")
Simulation/enzymeDiffuser.py:    print pixel_size
Simulation/enzymeDiffuser.py:    print("Done with userInput")
StagingArea/Visualization/imageReader.py:print(im.shape)
StagingArea/Visualization/videofig/videofig.py:from __future__ import print_function
Binary file StagingArea/Visualization/videofig/__pycache__/videofig.cpython-36.pyc matches
StagingArea/radial_centers.py:    #print range(len(I)-1)
StagingArea/radial_centers.py:    #print range(len(I[0])-1)
StagingArea/radial_centers.py:            #print u-v
StagingArea/radial_centers.py:            #print i,j,k
StagingArea/radial_centers.py:    print xc,yc
StagingArea/radial_centers.py:    print param[2],param[3]
StagingArea/radial_centers.py:    print mean
StagingArea/radial_centers.py:    print np.array([xc,yc]) - np.array(mean)
StagingArea/radial_centers.py:    print np.array([param[2],param[3]]) - np.array(mean)
StagingArea/radial_centers.py:        print
StagingArea/radial_centers.py:        print constlist[varindex]
StagingArea/radial_centers.py:                print "-------"
StagingArea/radial_centers.py:                print "Try {:}".format(tries)
StagingArea/radial_centers.py:                print xc,yc
StagingArea/radial_centers.py:                print param[2],param[3]
StagingArea/radial_centers.py:                print mean
StagingArea/radial_centers.py:                print np.array([xc,yc]) - np.array(mean)
StagingArea/radial_centers.py:                print np.array([param[2],param[3]]) - np.array(mean)
StagingArea/radial_centers.py:                    print "-------"
StagingArea/radial_centers.py:            print "----"
StagingArea/radial_centers.py:            print SNR
StagingArea/radial_centers.py:            print "----"
StagingArea/radial_centers.py:            print "----"
StagingArea/radial_centers.py:            print size
StagingArea/radial_centers.py:            print "----"
StagingArea/radial_centers.py:        print result
System/Fileio.py:                    print "n/a found"
System/Fileio.py:        #print detTracks[track]
System/Fileio.py:        print part_id
System/Fileio.py:#        print("Bit_depth unknown, set to 16bit")
System/Fileio.py:#    print inImage.size
System/Fileio.py:#    print a.shape
System/Fileio.py:#    print a.shape
System/Fileio.py:    print(image.min())
System/Fileio.py:    print
System/Fileio.py:                #print(image.min())
System/Fileio.py:                #print(image.min())
System/Fileio.py:    print
System/Fileio.py:    print(image.min())
System/Fileio.py:    print "Hello World!"
System/Fileio.py:    print "creating images now"
System/Fileio.py:    print len(tracks[0])
Binary file System/Fileio.pyc matches
System/wrapDebugger.py:print a
System/wrapDebugger.py:print b
